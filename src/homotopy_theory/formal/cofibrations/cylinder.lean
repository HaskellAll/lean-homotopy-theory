import categories.pasting_pushouts
import homotopy_theory.formal.cylinder.definitions
import .cofibration_category

universes u v

open categories
open categories.category
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

namespace homotopy_theory.cofibrations
open homotopy_theory.cylinder (endpoint)
open homotopy_theory.weak_equivalences
open homotopy_theory.weak_equivalences.category_with_weak_equivalences
open precofibration_category cofibration_category

variables {C : Type u} [cat : category.{u v} C] [cofibration_category.{u v} C]
include cat

variables {a b : C} {j : a ‚ü∂ b} (hj : is_cof j)

structure relative_cylinder :=
(ob : C)
(ii : (pushout_by_cof j j hj).ob ‚ü∂ ob)
(p : ob ‚ü∂ b)
(hii : is_cof ii)
(hp : is_weq p)
(pii : p ‚àò ii = (pushout_by_cof j j hj).is_pushout.induced (ùüô b) (ùüô b) rfl)

-- Any cofibration admits a relative cylinder.
lemma exists_relative_cylinder : nonempty (relative_cylinder hj) :=
let ‚ü®c, ii, p, hii, hp, pii‚ü© :=
  factorization ((pushout_by_cof j j hj).is_pushout.induced (ùüô b) (ùüô b) rfl) in
‚ü®‚ü®c, ii, p, hii, hp, pii‚ü©‚ü©

variables {hj}

def relative_cylinder.i‚ÇÄ (c : relative_cylinder hj) : b ‚ü∂ c.ob :=
c.ii ‚àò (pushout_by_cof j j hj).map‚ÇÄ

def relative_cylinder.i‚ÇÅ (c : relative_cylinder hj) : b ‚ü∂ c.ob :=
c.ii ‚àò (pushout_by_cof j j hj).map‚ÇÅ

lemma relative_cylinder.pi‚ÇÄ (c : relative_cylinder hj) : c.p ‚àò c.i‚ÇÄ = ùüô b :=
by unfold relative_cylinder.i‚ÇÄ; simp [c.pii]

lemma relative_cylinder.pi‚ÇÅ (c : relative_cylinder hj) : c.p ‚àò c.i‚ÇÅ = ùüô b :=
by unfold relative_cylinder.i‚ÇÅ; simp [c.pii]

lemma relative_cylinder.ij (c : relative_cylinder hj) : c.i‚ÇÄ ‚àò j = c.i‚ÇÅ ‚àò j :=
begin
  unfold relative_cylinder.i‚ÇÄ relative_cylinder.i‚ÇÅ,
  rw [‚Üêassociativity, ‚Üêassociativity, (pushout_by_cof j j hj).is_pushout.commutes]
end

lemma relative_cylinder.acof_i‚ÇÄ (c : relative_cylinder hj) : is_acof c.i‚ÇÄ :=
‚ü®cof_comp (pushout_is_cof (pushout_by_cof j j hj).is_pushout.transpose hj) c.hii,
 weq_of_comp_weq_right c.hp (by convert (weq_id _); exact c.pi‚ÇÄ)‚ü©

lemma relative_cylinder.acof_i‚ÇÅ (c : relative_cylinder hj) : is_acof c.i‚ÇÅ :=
‚ü®cof_comp (pushout_is_cof (pushout_by_cof j j hj).is_pushout hj) c.hii,
 weq_of_comp_weq_right c.hp (by convert (weq_id _); exact c.pi‚ÇÅ)‚ü©

structure cylinder_embedding (c c' : relative_cylinder hj) :=
(k : c.ob ‚ü∂ c'.ob)
(hk : is_cof k)
(hkii : k ‚àò c.ii = c'.ii)
(hpk : c'.p ‚àò k = c.p)

lemma cylinder_embedding.hki‚ÇÄ {c c' : relative_cylinder hj} (m : cylinder_embedding c c') :
  m.k ‚àò c.i‚ÇÄ = c'.i‚ÇÄ :=
by unfold relative_cylinder.i‚ÇÄ; simp [m.hkii]

lemma cylinder_embedding.hki‚ÇÅ {c c' : relative_cylinder hj} (m : cylinder_embedding c c') :
  m.k ‚àò c.i‚ÇÅ = c'.i‚ÇÅ :=
by unfold relative_cylinder.i‚ÇÅ; simp [m.hkii]

lemma cylinder_embedding.acof_k {c c' : relative_cylinder hj} (m : cylinder_embedding c c') :
  is_acof m.k :=
‚ü®m.hk, weq_of_comp_weq_right c'.hp (by convert c.hp; rw m.hpk)‚ü©

-- Any two relative cylinders on the same cofibration can be embedded
-- in a third.
lemma exists_common_embedding (c‚ÇÄ c‚ÇÅ : relative_cylinder hj) :
  ‚àÉ c' (m‚ÇÄ : cylinder_embedding c‚ÇÄ c') (m‚ÇÅ : cylinder_embedding c‚ÇÅ c'), true :=
let po := pushout_by_cof c‚ÇÄ.ii c‚ÇÅ.ii c‚ÇÄ.hii,
    pp := po.is_pushout.induced c‚ÇÄ.p c‚ÇÅ.p (by rw [c‚ÇÄ.pii, c‚ÇÅ.pii]),
    ‚ü®c'_ob, l, q, hl, hq, ql‚ü© := factorization pp in
let c' : relative_cylinder hj :=
  ‚ü®c'_ob, l ‚àò po.map‚ÇÅ ‚àò c‚ÇÅ.ii, q,
   cof_comp c‚ÇÅ.hii (cof_comp (pushout_is_cof po.is_pushout c‚ÇÄ.hii) hl),
   hq, by simp [ql, c‚ÇÅ.pii]‚ü© in
‚ü®c',
 ‚ü®l ‚àò po.map‚ÇÄ,
  cof_comp (pushout_is_cof po.is_pushout.transpose c‚ÇÅ.hii) hl,
  by rw [‚Üêassociativity, po.is_pushout.commutes, associativity],
  by simp [ql]‚ü©,
 ‚ü®l ‚àò po.map‚ÇÅ,
  cof_comp (pushout_is_cof po.is_pushout c‚ÇÄ.hii) hl,
  rfl,
  by simp [ql]‚ü©,
 trivial‚ü©

def relative_cylinder.reverse (c : relative_cylinder hj) : relative_cylinder hj :=
‚ü®c.ob,
 c.ii ‚àò (pushout_by_cof j j hj).is_pushout.swap,
 c.p,
 cof_comp (cof_iso (pushout_by_cof j j hj).is_pushout.swap_iso) c.hii,
 c.hp,
 by simp [c.pii]‚ü©

@[simp] lemma relative_cylinder.reverse_i‚ÇÄ {c : relative_cylinder hj} :
  c.reverse.i‚ÇÄ = c.i‚ÇÅ :=
show c.ii ‚àò (pushout_by_cof j j hj).is_pushout.induced _ _ _ ‚àò (pushout_by_cof j j hj).map‚ÇÄ = _,
by rw [‚Üêassociativity]; simp; refl

@[simp] lemma relative_cylinder.reverse_i‚ÇÅ {c : relative_cylinder hj} :
  c.reverse.i‚ÇÅ = c.i‚ÇÄ :=
show c.ii ‚àò (pushout_by_cof j j hj).is_pushout.induced _ _ _ ‚àò (pushout_by_cof j j hj).map‚ÇÅ = _,
by rw [‚Üêassociativity]; simp; refl

def relative_cylinder.glue (c‚ÇÄ c‚ÇÅ : relative_cylinder hj) : relative_cylinder.{u v} hj :=
let po := pushout_by_cof c‚ÇÄ.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c‚ÇÄ.acof_i‚ÇÅ.1 in
‚ü®po.ob,
 (pushout_by_cof j j hj).is_pushout.induced (po.map‚ÇÄ ‚àò c‚ÇÄ.i‚ÇÄ) (po.map‚ÇÅ ‚àò c‚ÇÅ.i‚ÇÅ) $
   by rw [‚Üêassociativity, ‚Üêassociativity, c‚ÇÄ.ij, ‚Üêc‚ÇÅ.ij]; simp [po.is_pushout.commutes],
 po.is_pushout.induced c‚ÇÄ.p c‚ÇÅ.p (by rw [c‚ÇÄ.pi‚ÇÅ, c‚ÇÅ.pi‚ÇÄ]),
 begin
   let po‚ÇÄ := pushout_by_cof c‚ÇÄ.i‚ÇÄ (pushout_by_cof j j hj).map‚ÇÄ c‚ÇÄ.acof_i‚ÇÄ.1,
   let po‚ÇÄ' :=
     (Is_pushout_of_Is_pushout_of_Is_pushout
       (pushout_by_cof j j hj).is_pushout.transpose po‚ÇÄ.is_pushout.transpose).transpose,
   let f :=
     (pushout_by_cof j j hj).is_pushout.induced
       (po‚ÇÄ.map‚ÇÄ ‚àò c‚ÇÄ.i‚ÇÅ) (po‚ÇÄ.map‚ÇÅ ‚àò (pushout_by_cof j j hj).map‚ÇÅ)
       (by rw [‚Üêassociativity, ‚Üêassociativity, ‚Üêc‚ÇÄ.ij,
               ‚Üê(pushout_by_cof j j hj).is_pushout.commutes,
               associativity, associativity, po‚ÇÄ.is_pushout.commutes]),
   let po‚ÇÅ : Is_pushout c‚ÇÄ.i‚ÇÅ (pushout_by_cof j j hj).map‚ÇÄ po‚ÇÄ.map‚ÇÄ f :=
     Is_pushout_of_Is_pushout_of_Is_pushout_vert'
       (pushout_by_cof j j hj).is_pushout
       (begin convert po‚ÇÄ' using 1, { exact c‚ÇÄ.ij.symm }, { simp } end) (by simp),
   let g := po‚ÇÅ.induced po.map‚ÇÄ (po.map‚ÇÅ ‚àò c‚ÇÅ.ii)
     (by rw ‚Üêassociativity; exact po.is_pushout.commutes),
   let po‚ÇÇ : Is_pushout f c‚ÇÅ.ii g po.map‚ÇÅ :=
     Is_pushout_of_Is_pushout_of_Is_pushout' po‚ÇÅ (by convert po.is_pushout; simp) (by simp),
   have : ‚àÄ p,
     (pushout_by_cof j j hj).is_pushout.induced (po.map‚ÇÄ ‚àò c‚ÇÄ.i‚ÇÄ) (po.map‚ÇÅ ‚àò c‚ÇÅ.i‚ÇÅ) p =
     g ‚àò po‚ÇÄ.map‚ÇÅ :=
   begin
     intro p, apply (pushout_by_cof j j hj).is_pushout.uniqueness,
     { rw [‚Üêassociativity, ‚Üêpo‚ÇÄ.is_pushout.commutes], simp },
     { rw ‚Üêassociativity,
       have :
         po‚ÇÄ.map‚ÇÅ ‚àò (pushout_by_cof.{u v} j j hj).map‚ÇÅ =
         f ‚àò (pushout_by_cof.{u v} j j hj).map‚ÇÅ, by simp,
       rw this,
       rw [associativity, po‚ÇÇ.commutes, ‚Üêassociativity],
       change _ = po.map‚ÇÅ ‚àò c‚ÇÅ.i‚ÇÅ, simp }
   end,
   rw this,
   exact cof_comp
     (pushout_is_cof po‚ÇÄ.is_pushout c‚ÇÄ.acof_i‚ÇÄ.1)
     (pushout_is_cof po‚ÇÇ.transpose c‚ÇÅ.hii)
 end,
 weq_of_comp_weq_left
   (pushout_is_acof po.is_pushout c‚ÇÄ.acof_i‚ÇÅ).2
   (by simpa using c‚ÇÅ.hp),
 begin
   apply (pushout_by_cof j j hj).is_pushout.uniqueness;
   { rw ‚Üêassociativity, simp, rw [c‚ÇÄ.pi‚ÇÄ] <|> rw [c‚ÇÅ.pi‚ÇÅ] }
 end‚ü©

@[simp] lemma relative_cylinder.glue_i‚ÇÄ {c‚ÇÄ c‚ÇÅ : relative_cylinder hj} :
  (c‚ÇÄ.glue c‚ÇÅ).i‚ÇÄ = (pushout_by_cof c‚ÇÄ.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c‚ÇÄ.acof_i‚ÇÅ.1).map‚ÇÄ ‚àò c‚ÇÄ.i‚ÇÄ :=
let po := pushout_by_cof c‚ÇÄ.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c‚ÇÄ.acof_i‚ÇÅ.1 in
show
  (pushout_by_cof j j hj).is_pushout.induced (po.map‚ÇÄ ‚àò c‚ÇÄ.i‚ÇÄ) (po.map‚ÇÅ ‚àò c‚ÇÅ.i‚ÇÅ) _ ‚àò
    (pushout_by_cof j j hj).map‚ÇÄ = _, by simp

@[simp] lemma relative_cylinder.glue_i‚ÇÅ {c‚ÇÄ c‚ÇÅ : relative_cylinder hj} :
  (c‚ÇÄ.glue c‚ÇÅ).i‚ÇÅ = (pushout_by_cof c‚ÇÄ.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c‚ÇÄ.acof_i‚ÇÅ.1).map‚ÇÅ ‚àò c‚ÇÅ.i‚ÇÅ :=
let po := pushout_by_cof c‚ÇÄ.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c‚ÇÄ.acof_i‚ÇÅ.1 in
show
  (pushout_by_cof j j hj).is_pushout.induced (po.map‚ÇÄ ‚àò c‚ÇÄ.i‚ÇÄ) (po.map‚ÇÅ ‚àò c‚ÇÅ.i‚ÇÅ) _ ‚àò
    (pushout_by_cof j j hj).map‚ÇÅ = _, by simp

end homotopy_theory.cofibrations
