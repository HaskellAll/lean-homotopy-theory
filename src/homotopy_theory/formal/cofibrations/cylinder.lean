import homotopy_theory.formal.cylinder.definitions
import .cofibration_category

universes u v

open categories
open categories.category
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

namespace homotopy_theory.cofibrations
open homotopy_theory.cylinder (endpoint)
open homotopy_theory.weak_equivalences
open homotopy_theory.weak_equivalences.category_with_weak_equivalences
open precofibration_category cofibration_category

variables {C : Type u} [cat : category.{u v} C] [cofibration_category.{u v} C]
include cat

variables {a b : C} {j : a ‚ü∂ b} (hj : is_cof j)

structure relative_cylinder :=
(ob : C)
(ii : (pushout_by_cof j j hj).ob ‚ü∂ ob)
(p : ob ‚ü∂ b)
(hii : is_cof ii)
(hp : is_weq p)
(pii : p ‚àò ii = (pushout_by_cof j j hj).is_pushout.induced (ùüô b) (ùüô b) rfl)

-- Any cofibration admits a relative cylinder.
lemma exists_relative_cylinder : nonempty (relative_cylinder hj) :=
let ‚ü®c, ii, p, hii, hp, pii‚ü© :=
  factorization ((pushout_by_cof j j hj).is_pushout.induced (ùüô b) (ùüô b) rfl) in
‚ü®‚ü®c, ii, p, hii, hp, pii‚ü©‚ü©

variables {hj}

structure cylinder_embedding (c c' : relative_cylinder hj) :=
(k : c.ob ‚ü∂ c'.ob)
(hk : is_cof k)
(hkii : k ‚àò c.ii = c'.ii)
(hpk : c'.p ‚àò k = c.p)

lemma cylinder.embedding.acof_k {c c' : relative_cylinder hj} (m : cylinder_embedding c c') :
  is_acof m.k :=
‚ü®m.hk, weq_of_comp_weq_right c'.hp (by convert c.hp; rw m.hpk)‚ü©

-- Any two relative cylinders on the same cofibration can be embedded
-- in a third.
lemma exists_common_embedding (c‚ÇÄ c‚ÇÅ : relative_cylinder hj) :
  ‚àÉ c' (m‚ÇÄ : cylinder_embedding c‚ÇÄ c') (m‚ÇÅ : cylinder_embedding c‚ÇÅ c'), true :=
let po := pushout_by_cof c‚ÇÄ.ii c‚ÇÅ.ii c‚ÇÄ.hii,
    pp := po.is_pushout.induced c‚ÇÄ.p c‚ÇÅ.p (by rw [c‚ÇÄ.pii, c‚ÇÅ.pii]),
    ‚ü®c'_ob, l, q, hl, hq, ql‚ü© := factorization pp in
let c' : relative_cylinder hj :=
  ‚ü®c'_ob, l ‚àò po.map‚ÇÅ ‚àò c‚ÇÅ.ii, q,
   cof_comp c‚ÇÅ.hii (cof_comp (pushout_is_cof po.is_pushout c‚ÇÄ.hii) hl),
   hq, by simp [ql, c‚ÇÅ.pii]‚ü© in
‚ü®c',
 ‚ü®l ‚àò po.map‚ÇÄ,
  cof_comp (pushout_is_cof po.is_pushout.transpose c‚ÇÅ.hii) hl,
  by rw [‚Üêassociativity, po.is_pushout.commutes, associativity],
  by simp [ql]‚ü©,
 ‚ü®l ‚àò po.map‚ÇÅ,
  cof_comp (pushout_is_cof po.is_pushout c‚ÇÄ.hii) hl,
  rfl,
  by simp [ql]‚ü©,
 trivial‚ü©

end homotopy_theory.cofibrations
