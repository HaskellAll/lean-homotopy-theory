import categories.assoc_pushouts
import categories.groupoid
import .homotopy

universes u v

open categories
open categories.category
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

namespace homotopy_theory.cofibrations
open homotopy_theory.weak_equivalences
open precofibration_category cofibration_category

variables {C : Type u} [cat : category.{u v} C] [cofibration_category.{u v} C]
include cat

-- Tracks, or "homotopies up to homotopy". This notion is a bit tricky
-- because there is no canonical choice of cylinder object on which to
-- define homotopies. Instead, we define an equivalence relation
-- between homotopies defined on different cylinder objects and define
-- a track to be an equivalence class, and then show that every
-- cylinder object admits a unique homotopy class of homotopies
-- representing each track.

variables {a b : C} {j : a ‚ü∂ b} (hj : is_cof j)
variables {x : C}
variables (f‚ÇÄ f‚ÇÅ : b ‚ü∂ x)

structure homotopy :=
(c : relative_cylinder hj)
(h : homotopy_on c f‚ÇÄ f‚ÇÅ)

variables {hj f‚ÇÄ f‚ÇÅ}
-- An extension of homotopies. These are like acyclic cofibrations in
-- a category of objects under b ‚äî‚Çê b and over b and x, where the
-- compositions b ‚äî‚Çê b ‚Üí b and b ‚äî‚Çê b ‚Üí x are given by the fold map
-- and (f‚ÇÄ, f‚ÇÅ) respectively.
structure homotopy_extension (t t' : homotopy hj f‚ÇÄ f‚ÇÅ) :=
(m : cylinder_embedding t.c t'.c)
(e : t'.h.H ‚àò m.k = t.h.H)

def homotopy_extension.refl (t : homotopy hj f‚ÇÄ f‚ÇÅ) : homotopy_extension t t :=
‚ü®cylinder_embedding.refl t.c, show _ ‚àò ùüô _ = _, by simp‚ü©

def homotopy_extension.trans {t‚ÇÄ t‚ÇÅ t‚ÇÇ : homotopy hj f‚ÇÄ f‚ÇÅ}
  (m‚ÇÄ : homotopy_extension t‚ÇÄ t‚ÇÅ) (m‚ÇÅ : homotopy_extension t‚ÇÅ t‚ÇÇ) :
  homotopy_extension t‚ÇÄ t‚ÇÇ :=
‚ü®m‚ÇÄ.m.trans m‚ÇÅ.m,
 by dsimp [cylinder_embedding.trans]; rw [associativity, m‚ÇÅ.e, m‚ÇÄ.e]‚ü©

def homotopy_extension.pushout {t t‚ÇÄ t‚ÇÅ : homotopy hj f‚ÇÄ f‚ÇÅ}
  (m‚ÇÄ : homotopy_extension t t‚ÇÄ) (m‚ÇÅ : homotopy_extension t t‚ÇÅ) :
  homotopy hj f‚ÇÄ f‚ÇÅ :=
‚ü®cylinder_embedding.pushout m‚ÇÄ.m m‚ÇÅ.m,
 ‚ü®(cylinder_embedding.pushout.is_pushout m‚ÇÄ.m m‚ÇÅ.m).induced t‚ÇÄ.h.H t‚ÇÅ.h.H
    (by rw [m‚ÇÄ.e, m‚ÇÅ.e]),
  begin
    convert t‚ÇÅ.h.Hi‚ÇÄ using 1, unfold relative_cylinder.i‚ÇÄ,
    dsimp [cylinder_embedding.pushout], simp
  end,
  begin
    convert t‚ÇÅ.h.Hi‚ÇÅ using 1, unfold relative_cylinder.i‚ÇÅ,
    dsimp [cylinder_embedding.pushout], simp
  end‚ü©‚ü©

def homotopy_extension.pushout.map‚ÇÄ {t t‚ÇÄ t‚ÇÅ : homotopy hj f‚ÇÄ f‚ÇÅ}
  (m‚ÇÄ : homotopy_extension t t‚ÇÄ) (m‚ÇÅ : homotopy_extension t t‚ÇÅ) :
  homotopy_extension t‚ÇÄ (homotopy_extension.pushout m‚ÇÄ m‚ÇÅ) :=
‚ü®cylinder_embedding.pushout.map‚ÇÄ m‚ÇÄ.m m‚ÇÅ.m,
 by dsimp [cylinder_embedding.pushout.map‚ÇÄ, homotopy_extension.pushout]; simp‚ü©

def homotopy_extension.pushout.map‚ÇÅ {t t‚ÇÄ t‚ÇÅ : homotopy hj f‚ÇÄ f‚ÇÅ}
  (m‚ÇÄ : homotopy_extension t t‚ÇÄ) (m‚ÇÅ : homotopy_extension t t‚ÇÅ) :
  homotopy_extension t‚ÇÅ (homotopy_extension.pushout m‚ÇÄ m‚ÇÅ) :=
‚ü®cylinder_embedding.pushout.map‚ÇÅ m‚ÇÄ.m m‚ÇÅ.m,
 by dsimp [cylinder_embedding.pushout.map‚ÇÅ, homotopy_extension.pushout]; simp‚ü©

-- Two homotopies are equivalent if they have a common extension.
def homotopy_equiv (t‚ÇÄ t‚ÇÅ : homotopy hj f‚ÇÄ f‚ÇÅ) : Prop :=
‚àÉ t' (m‚ÇÄ : homotopy_extension t‚ÇÄ t') (m‚ÇÅ : homotopy_extension t‚ÇÅ t'), true

-- Homotopy equivalence is an equivalence relation.
lemma homotopy_equiv.refl (t : homotopy hj f‚ÇÄ f‚ÇÅ) : homotopy_equiv t t :=
‚ü®t, homotopy_extension.refl t, homotopy_extension.refl t, ‚ü®‚ü©‚ü©

lemma homotopy_equiv.symm {t‚ÇÄ t‚ÇÅ : homotopy hj f‚ÇÄ f‚ÇÅ} :
  homotopy_equiv t‚ÇÄ t‚ÇÅ ‚Üí homotopy_equiv t‚ÇÅ t‚ÇÄ :=
assume ‚ü®t', m‚ÇÄ, m‚ÇÅ, ‚ü®‚ü©‚ü©, ‚ü®t', m‚ÇÅ, m‚ÇÄ, ‚ü®‚ü©‚ü©

lemma homotopy_equiv.trans {t‚ÇÄ t‚ÇÅ t‚ÇÇ : homotopy hj f‚ÇÄ f‚ÇÅ} :
  homotopy_equiv t‚ÇÄ t‚ÇÅ ‚Üí homotopy_equiv t‚ÇÅ t‚ÇÇ ‚Üí homotopy_equiv t‚ÇÄ t‚ÇÇ :=
assume ‚ü®t, m‚ÇÄ, m‚ÇÅ, ‚ü®‚ü©‚ü© ‚ü®t', m‚ÇÅ', m‚ÇÇ', ‚ü®‚ü©‚ü©,
‚ü®m‚ÇÅ.pushout m‚ÇÅ',
 m‚ÇÄ.trans (homotopy_extension.pushout.map‚ÇÄ m‚ÇÅ m‚ÇÅ'),
 m‚ÇÇ'.trans (homotopy_extension.pushout.map‚ÇÅ m‚ÇÅ m‚ÇÅ'),
 ‚ü®‚ü©‚ü©

structure homotopy_iso (t t' : homotopy hj f‚ÇÄ f‚ÇÅ) :=
(k : t.c.ob ‚âÖ t'.c.ob)
(hkii : ‚Üëk ‚àò t.c.ii = t'.c.ii)
(hpk : t'.c.p ‚àò ‚Üëk = t.c.p)
(e : t'.h.H ‚àò ‚Üëk = t.h.H)

lemma homotopy_equiv_of_iso {t t' : homotopy hj f‚ÇÄ f‚ÇÅ} (i : homotopy_iso t t') :
  homotopy_equiv t t' :=
‚ü®t', ‚ü®‚ü®i.k, cof_iso _, i.hkii, i.hpk‚ü©, i.e‚ü©, homotopy_extension.refl t', ‚ü®‚ü©‚ü©

instance homotopy_equiv.setoid : setoid (homotopy hj f‚ÇÄ f‚ÇÅ) :=
{ r := homotopy_equiv,
  iseqv :=
    ‚ü®Œª t, homotopy_equiv.refl t,
     Œª t‚ÇÄ t‚ÇÅ, homotopy_equiv.symm,
     Œª t‚ÇÄ t‚ÇÅ t‚ÇÇ, homotopy_equiv.trans‚ü© }

variables (hj f‚ÇÄ f‚ÇÅ)
def track := quotient (homotopy_equiv.setoid : setoid (homotopy hj f‚ÇÄ f‚ÇÅ))

private noncomputable def chosen_cylinder : relative_cylinder hj :=
classical.choice (exists_relative_cylinder hj)

variables {hj f‚ÇÄ f‚ÇÅ}
noncomputable def track.refl (f : b ‚ü∂ x) : track hj f f :=
‚ü¶‚ü®chosen_cylinder hj, homotopy_on.refl f‚ü©‚üß

lemma track.refl_eq {f : b ‚ü∂ x} (c : relative_cylinder hj) :
  (track.refl f : track hj f f) = ‚ü¶‚ü®c, homotopy_on.refl f‚ü©‚üß :=
quot.sound $
  let c‚ÇÄ := chosen_cylinder hj,
      ‚ü®‚ü®c', m‚ÇÄ, m‚ÇÅ‚ü©‚ü© := exists_common_embedding c‚ÇÄ c in
  ‚ü®‚ü®c', homotopy_on.refl f‚ü©,
   ‚ü®m‚ÇÄ, show f ‚àò c'.p ‚àò m‚ÇÄ.k = f ‚àò c‚ÇÄ.p, by rw [‚Üêassociativity, m‚ÇÄ.hpk]‚ü©,
   ‚ü®m‚ÇÅ, show f ‚àò c'.p ‚àò m‚ÇÅ.k = f ‚àò c.p, by rw [‚Üêassociativity, m‚ÇÅ.hpk]‚ü©, ‚ü®‚ü©‚ü©

local attribute [elab_with_expected_type] quotient.lift_on quotient.lift_on‚ÇÇ

def track.symm {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} : track hj f‚ÇÄ f‚ÇÅ ‚Üí track hj f‚ÇÅ f‚ÇÄ :=
Œª t, quotient.lift_on t
  (Œª t, ‚ü¶‚ü®t.c.reverse, t.h.symm‚ü©‚üß)
  (assume t t' ‚ü®t'', m‚ÇÄ, m‚ÇÅ, ‚ü®‚ü©‚ü©, quotient.sound $
    ‚ü®‚ü®t''.c.reverse, t''.h.symm‚ü©, ‚ü®m‚ÇÄ.m.reverse, m‚ÇÄ.e‚ü©, ‚ü®m‚ÇÅ.m.reverse, m‚ÇÅ.e‚ü©, ‚ü®‚ü©‚ü©)

def track.trans {f‚ÇÄ f‚ÇÅ f‚ÇÇ : b ‚ü∂ x} : track hj f‚ÇÄ f‚ÇÅ ‚Üí track hj f‚ÇÅ f‚ÇÇ ‚Üí track hj f‚ÇÄ f‚ÇÇ :=
Œª t‚ÇÄ t‚ÇÅ, quotient.lift_on‚ÇÇ t‚ÇÄ t‚ÇÅ
  (Œª t‚ÇÄ t‚ÇÅ, ‚ü¶‚ü®t‚ÇÄ.c.glue t‚ÇÅ.c, t‚ÇÄ.h.trans t‚ÇÅ.h‚ü©‚üß)
  (assume t‚ÇÄ t‚ÇÅ t‚ÇÄ' t‚ÇÅ' ‚ü®t‚ÇÄ'', m‚ÇÄ‚ÇÄ, m‚ÇÄ‚ÇÅ, ‚ü®‚ü©‚ü© ‚ü®t‚ÇÅ'', m‚ÇÅ‚ÇÄ, m‚ÇÅ‚ÇÅ, ‚ü®‚ü©‚ü©, quotient.sound $
    ‚ü®‚ü®t‚ÇÄ''.c.glue t‚ÇÅ''.c, t‚ÇÄ''.h.trans t‚ÇÅ''.h‚ü©,
     ‚ü®m‚ÇÄ‚ÇÄ.m.glue m‚ÇÅ‚ÇÄ.m,
      begin
        apply (pushout_by_cof t‚ÇÄ.c.i‚ÇÅ t‚ÇÅ.c.i‚ÇÄ t‚ÇÄ.c.acof_i‚ÇÅ.1).is_pushout.uniqueness;
        dsimp [homotopy_on.trans, cylinder_embedding.glue]; rw ‚Üêassociativity;
        simp [m‚ÇÄ‚ÇÄ.e, m‚ÇÅ‚ÇÄ.e],
      end‚ü©,
     ‚ü®m‚ÇÄ‚ÇÅ.m.glue m‚ÇÅ‚ÇÅ.m,
      begin
        apply (pushout_by_cof t‚ÇÄ'.c.i‚ÇÅ t‚ÇÅ'.c.i‚ÇÄ t‚ÇÄ'.c.acof_i‚ÇÅ.1).is_pushout.uniqueness;
        dsimp [homotopy_on.trans, cylinder_embedding.glue]; rw ‚Üêassociativity;
        simp [m‚ÇÄ‚ÇÅ.e, m‚ÇÅ‚ÇÅ.e],
      end‚ü©, ‚ü®‚ü©‚ü©)

-- The groupoid laws.

lemma track.left_identity {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} (t : track hj f‚ÇÄ f‚ÇÅ) :
  track.trans (track.refl _) t = t :=
quotient.induction_on t $ Œª ‚ü®c‚ÇÅ, h‚ü©, quotient.sound $
  -- Set up variable names to match `exists_common_embedding` as
  -- closely as possible, so that what we construct is, in particular,
  -- a common embedding of c‚ÇÄ and c‚ÇÅ.
  let c := chosen_cylinder hj,
      c‚ÇÄ := c.glue c‚ÇÅ,
      p' : c‚ÇÄ.ob ‚ü∂ c‚ÇÅ.ob :=
        (pushout_by_cof c.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c.acof_i‚ÇÅ.1).is_pushout.induced
          (c‚ÇÅ.i‚ÇÄ ‚àò c.p) (ùüô c‚ÇÅ.ob) (by rw [‚Üêassociativity, c.pi‚ÇÅ]; simp),
      po := pushout_by_cof c‚ÇÄ.ii c‚ÇÅ.ii c‚ÇÄ.hii,
      pp := po.is_pushout.induced p' (ùüô c‚ÇÅ.ob) $ begin
        apply (pushout_by_cof j j hj).is_pushout.uniqueness,
        { rw [‚Üêassociativity, ‚Üêassociativity], change _ ‚àò c‚ÇÄ.i‚ÇÄ = _ ‚àò c‚ÇÅ.i‚ÇÄ, simp,
          rw [‚Üêassociativity, c.pi‚ÇÄ], simp },
        { rw [‚Üêassociativity, ‚Üêassociativity], change _ ‚àò c‚ÇÄ.i‚ÇÅ = _ ‚àò c‚ÇÅ.i‚ÇÅ, simp }
      end,
      ‚ü®c'_ob, l, q', hl, hq', q'l‚ü© := factorization pp,
      cem :=
        common_embedding_of_factorization c‚ÇÄ c‚ÇÅ po c'_ob l (c‚ÇÅ.p ‚àò q')
          hl (weq_comp hq' c‚ÇÅ.hp) $ begin
            rw [‚Üêassociativity, q'l],
            apply po.is_pushout.uniqueness; rw ‚Üêassociativity; simp,
            apply (pushout_by_cof c.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c.acof_i‚ÇÅ.1).is_pushout.uniqueness;
              rw ‚Üêassociativity; simp; change _ = Is_pushout.induced _ _ _ _ ‚àò _,
            { simp [c‚ÇÅ.pi‚ÇÄ] }, { simp },
          end,
      h' : homotopy_on cem.c' f‚ÇÄ f‚ÇÅ :=
        ‚ü®h.H ‚àò q',
         calc
           h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÅ ‚àò c‚ÇÅ.ii ‚àò _)
             = h.H ‚àò (q' ‚àò l ‚àò po.map‚ÇÅ) ‚àò c‚ÇÅ.i‚ÇÄ  : by simp [relative_cylinder.i‚ÇÄ]
         ... = h.H ‚àò c‚ÇÅ.i‚ÇÄ                       : by rw q'l; simp
         ... = f‚ÇÄ                                : h.Hi‚ÇÄ,
         calc
           h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÅ ‚àò c‚ÇÅ.ii ‚àò _)
             = h.H ‚àò (q' ‚àò l ‚àò po.map‚ÇÅ) ‚àò c‚ÇÅ.i‚ÇÅ  : by simp [relative_cylinder.i‚ÇÅ]
         ... = h.H ‚àò c‚ÇÅ.i‚ÇÅ                       : by rw q'l; simp
         ... = f‚ÇÅ                                : h.Hi‚ÇÅ‚ü© in
  ‚ü®‚ü®cem.c', h'‚ü©,
   ‚ü®cem.m‚ÇÄ, calc
      h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÄ)
        = h.H ‚àò ((q' ‚àò l) ‚àò po.map‚ÇÄ)  : by simp
    ... = h.H ‚àò (pp ‚àò po.map‚ÇÄ)        : by rw q'l
    ... = h.H ‚àò p'                    : by simp
    ... = (homotopy_on.trans (homotopy_on.refl f‚ÇÄ) h).H  : begin
      unfold homotopy_on.trans homotopy_on.refl,
      apply (pushout_by_cof c.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c.acof_i‚ÇÅ.1).is_pushout.uniqueness;
        rw ‚Üêassociativity; simp [h.Hi‚ÇÄ]
    end‚ü©,
   ‚ü®cem.m‚ÇÅ, calc
      h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÅ)
        = h.H ‚àò ((q' ‚àò l) ‚àò po.map‚ÇÅ)  : by simp
    ... = h.H ‚àò (pp ‚àò po.map‚ÇÅ)        : by rw q'l
    ... = h.H                         : by simp‚ü©,
   ‚ü®‚ü©‚ü©

lemma track.left_inverse {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} (t : track hj f‚ÇÄ f‚ÇÅ) :
  track.trans t.symm t = track.refl _ :=
quotient.induction_on t $ Œª ‚ü®c, h‚ü©, quotient.sound $
  -- Set up variable names to match `exists_common_embedding` as
  -- closely as possible, so that what we construct is, in particular,
  -- a common embedding of c‚ÇÄ and c‚ÇÅ.
  let c‚ÇÅ := chosen_cylinder hj,
      c‚ÇÄ := c.reverse.glue c,
      p' : c‚ÇÄ.ob ‚ü∂ c.ob :=
        (pushout_by_cof c.reverse.i‚ÇÅ c.i‚ÇÄ c.reverse.acof_i‚ÇÅ.1).is_pushout.induced
          (ùüô c.ob) (ùüô c.ob) (by simp; erw right_identity_lemma), -- Yuck
      po := pushout_by_cof c‚ÇÄ.ii c‚ÇÅ.ii c‚ÇÄ.hii,
      pp := po.is_pushout.induced p' (c.i‚ÇÅ ‚àò c‚ÇÅ.p) $ begin
        apply (pushout_by_cof j j hj).is_pushout.uniqueness;
          rw [‚Üêassociativity, ‚Üêassociativity],
        { change _ ‚àò c‚ÇÄ.i‚ÇÄ = _ ‚àò c‚ÇÅ.i‚ÇÄ, simp,
          erw [‚Üêassociativity, c‚ÇÅ.pi‚ÇÄ, right_identity_lemma], simp },
        { change _ ‚àò c‚ÇÄ.i‚ÇÅ = _ ‚àò c‚ÇÅ.i‚ÇÅ, simp, rw [‚Üêassociativity, c‚ÇÅ.pi‚ÇÅ], simp }
      end,
      ‚ü®c'_ob, l, q', hl, hq', q'l‚ü© := factorization pp,
      cem :=
        common_embedding_of_factorization c‚ÇÄ c‚ÇÅ po c'_ob l (c.p ‚àò q')
          hl (weq_comp hq' c.hp) $ begin
            rw [‚Üêassociativity, q'l],
            apply po.is_pushout.uniqueness; rw ‚Üêassociativity; simp,
            apply (pushout_by_cof c.reverse.i‚ÇÅ c.i‚ÇÄ c.reverse.acof_i‚ÇÅ.1).is_pushout.uniqueness;
              rw ‚Üêassociativity; simp; change _ = Is_pushout.induced _ _ _ _ ‚àò _,
            { erw [left_identity_lemma, Is_pushout.induced_commutes‚ÇÄ], refl },
            { simp },
            { simp [c.pi‚ÇÅ] }    -- What is this even for?
          end,
      h' : homotopy_on cem.c' f‚ÇÅ f‚ÇÅ :=
        ‚ü®h.H ‚àò q',
         calc
           h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÅ ‚àò c‚ÇÅ.ii ‚àò _)
             = h.H ‚àò (q' ‚àò l ‚àò po.map‚ÇÅ) ‚àò c‚ÇÅ.i‚ÇÄ  : by simp [relative_cylinder.i‚ÇÄ]
         ... = h.H ‚àò c.i‚ÇÅ ‚àò (c‚ÇÅ.p ‚àò c‚ÇÅ.i‚ÇÄ)       : by rw q'l; simp
         ... = f‚ÇÅ                                : by rw [c‚ÇÅ.pi‚ÇÄ, h.Hi‚ÇÅ]; simp,
         calc
           h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÅ ‚àò c‚ÇÅ.ii ‚àò _)
             = h.H ‚àò (q' ‚àò l ‚àò po.map‚ÇÅ) ‚àò c‚ÇÅ.i‚ÇÅ  : by simp [relative_cylinder.i‚ÇÅ]
         ... = h.H ‚àò c.i‚ÇÅ ‚àò (c‚ÇÅ.p ‚àò c‚ÇÅ.i‚ÇÅ)       : by rw q'l; simp
         ... = f‚ÇÅ                                : by rw [c‚ÇÅ.pi‚ÇÅ, h.Hi‚ÇÅ]; simp‚ü© in
  ‚ü®‚ü®cem.c', h'‚ü©,
   ‚ü®cem.m‚ÇÄ, calc
      h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÄ)
        = h.H ‚àò ((q' ‚àò l) ‚àò po.map‚ÇÄ)  : by simp
    ... = h.H ‚àò (pp ‚àò po.map‚ÇÄ)        : by rw q'l
    ... = h.H ‚àò p'                    : by simp
    ... = (homotopy_on.trans h.symm h).H  : begin
      unfold homotopy_on.trans homotopy_on.symm,
      apply (pushout_by_cof c.reverse.i‚ÇÅ c.i‚ÇÄ c.reverse.acof_i‚ÇÅ.1).is_pushout.uniqueness;
        rw ‚Üêassociativity; simp; erw left_identity_lemma
    end‚ü©,
   ‚ü®cem.m‚ÇÅ, calc
      h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÅ)
        = h.H ‚àò ((q' ‚àò l) ‚àò po.map‚ÇÅ)  : by simp
    ... = h.H ‚àò (pp ‚àò po.map‚ÇÅ)        : by rw q'l
    ... = h.H ‚àò c.i‚ÇÅ ‚àò c‚ÇÅ.p           : by simp
    ... = (homotopy_on.refl f‚ÇÅ).H     : by rw h.Hi‚ÇÅ; refl‚ü©,
   ‚ü®‚ü©‚ü©

lemma track.inverse_inverse {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} {t : track hj f‚ÇÄ f‚ÇÅ} :
  t.symm.symm = t :=
-- t.symm.symm and t are homotopies defined on cylinder objects which
-- are equal, but not definitionally equal. Rather than dealing with
-- heterogeneous equality between the homotopies, it's easier to just
-- use `homotopy_equiv_of_iso`.
quotient.induction_on t $ Œª t, quotient.sound $ homotopy_equiv_of_iso $
  ‚ü®isomorphism.Isomorphism.refl _,
   by apply (pushout_by_cof j j hj).is_pushout.uniqueness;
      dsimp [relative_cylinder.reverse, Is_pushout.swap];
      rw [‚Üêassociativity, ‚Üêassociativity, ‚Üêassociativity]; simp,
   by dsimp [relative_cylinder.reverse]; simp,
   by simp [homotopy_on.symm]‚ü©

lemma track.right_inverse {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} (t : track hj f‚ÇÄ f‚ÇÅ) :
  track.trans t t.symm = track.refl _ :=
by convert track.left_inverse t.symm; rw track.inverse_inverse

lemma track.assoc {f‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ : b ‚ü∂ x}
  (t‚ÇÄ : track hj f‚ÇÄ f‚ÇÅ) (t‚ÇÅ : track hj f‚ÇÅ f‚ÇÇ) (t‚ÇÇ : track hj f‚ÇÇ f‚ÇÉ) :
  (t‚ÇÄ.trans t‚ÇÅ).trans t‚ÇÇ = t‚ÇÄ.trans (t‚ÇÅ.trans t‚ÇÇ) :=
quotient.induction_on‚ÇÉ t‚ÇÄ t‚ÇÅ t‚ÇÇ $ Œª t‚ÇÄ t‚ÇÅ t‚ÇÇ, quotient.sound $ homotopy_equiv_of_iso
  ‚ü®Is_pushout_assoc
     (pushout_by_cof t‚ÇÄ.c.i‚ÇÅ t‚ÇÅ.c.i‚ÇÄ t‚ÇÄ.c.acof_i‚ÇÅ.1).is_pushout
     (by convert (pushout_by_cof (t‚ÇÄ.c.glue t‚ÇÅ.c).i‚ÇÅ t‚ÇÇ.c.i‚ÇÄ _).is_pushout using 1; simp)
     (pushout_by_cof t‚ÇÅ.c.i‚ÇÅ t‚ÇÇ.c.i‚ÇÄ t‚ÇÅ.c.acof_i‚ÇÅ.1).is_pushout
     (by convert (pushout_by_cof t‚ÇÄ.c.i‚ÇÅ (t‚ÇÅ.c.glue t‚ÇÇ.c).i‚ÇÄ _).is_pushout using 1; simp),
   begin
     apply (pushout_by_cof j j hj).is_pushout.uniqueness; rw ‚Üêassociativity,
     { change _ ‚àò relative_cylinder.i‚ÇÄ _ = relative_cylinder.i‚ÇÄ _, simp },
     { change _ ‚àò relative_cylinder.i‚ÇÅ _ = relative_cylinder.i‚ÇÅ _, simp }
   end,
   begin
     symmetry,
     apply Is_pushout_assoc_uniqueness;
       dsimp [relative_cylinder.glue]; simp
   end,
   begin
     symmetry,
     apply Is_pushout_assoc_uniqueness;
       dsimp [relative_cylinder.glue, homotopy_on.trans]; simp
   end‚ü©

lemma track.right_identity {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} (t : track hj f‚ÇÄ f‚ÇÅ) :
  track.trans t (track.refl _) = t :=
calc
  t.trans (track.refl _)
    = t.trans (t.symm.trans t) : by rw track.left_inverse
... = (t.trans t.symm).trans t : by rw track.assoc
... = (track.refl _).trans t   : by rw track.right_inverse
... = t                        : by rw track.left_identity

variables {y : C} (g : x ‚ü∂ y)

def track.congr_left {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} (t : track hj f‚ÇÄ f‚ÇÅ) :
  track hj (g ‚àò f‚ÇÄ) (g ‚àò f‚ÇÅ) :=
quotient.lift_on t
  (Œª t, ‚ü¶‚ü®t.c, t.h.congr_left hj g‚ü©‚üß)
  (Œª t t' ‚ü®t'', m‚ÇÄ, m‚ÇÅ, ‚ü®‚ü©‚ü©, quotient.sound
     ‚ü®‚ü®t''.c, t''.h.congr_left hj g‚ü©,
      ‚ü®m‚ÇÄ.m, show (g ‚àò _) ‚àò _ = _, by rw [‚Üêassociativity, m‚ÇÄ.e]; refl‚ü©,
      ‚ü®m‚ÇÅ.m, show (g ‚àò _) ‚àò _ = _, by rw [‚Üêassociativity, m‚ÇÅ.e]; refl‚ü©,
      ‚ü®‚ü©‚ü©)

variables (hj x)
include hj
def track_groupoid_rel := b ‚ü∂ x
omit hj

noncomputable instance : groupoid (track_groupoid_rel hj x) :=
{ Hom := Œª f‚ÇÄ f‚ÇÅ, track hj f‚ÇÄ f‚ÇÅ,
  identity := Œª f, track.refl f,
  compose := Œª f‚ÇÄ f‚ÇÅ f‚ÇÇ t‚ÇÄ t‚ÇÅ, t‚ÇÄ.trans t‚ÇÅ,
  inverse := Œª f‚ÇÄ f‚ÇÅ t, t.symm,

  left_identity := Œª f‚ÇÄ f‚ÇÅ, track.left_identity,
  right_identity := Œª f‚ÇÄ f‚ÇÅ, track.right_identity,
  associativity := Œª f‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ, track.assoc,
  left_inverse := Œª f‚ÇÄ f‚ÇÅ, track.left_inverse,
  right_inverse := Œª f‚ÇÄ f‚ÇÅ, track.right_inverse }

variables {x}
noncomputable def track_groupoid_rel_functor {y} (g : x ‚ü∂ y) :
  track_groupoid_rel hj x ‚Üù track_groupoid_rel hj y :=
{ onObjects := Œª f, g ‚àò f,
  onMorphisms := Œª f‚ÇÄ f‚ÇÅ t, t.congr_left g,
  identities := Œª f,
    show (track.refl f).congr_left g = track.refl (g ‚àò f),
    begin
      apply congr_arg quotient.mk,
      unfold homotopy_on.refl homotopy_on.congr_left,
      congr' 2,
      rw ‚Üêassociativity, refl
    end,
  functoriality := Œª f‚ÇÄ f‚ÇÅ f‚ÇÇ t‚ÇÄ t‚ÇÅ,
    show (t‚ÇÄ.trans t‚ÇÅ).congr_left g = (t‚ÇÄ.congr_left g).trans (t‚ÇÅ.congr_left g),
    begin
      induction t‚ÇÄ using quot.ind,
      induction t‚ÇÅ using quot.ind,
      apply congr_arg quotient.mk,
      congr', apply homotopy_on.ext,
      apply pushout_induced_comp
    end }

end homotopy_theory.cofibrations
