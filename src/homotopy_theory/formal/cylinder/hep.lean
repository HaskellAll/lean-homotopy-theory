import categories.colimits
import .definitions

open categories
open categories.category
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

universe u

namespace homotopy_theory.cylinder

section hep

variables {C : Type u} [category C] [inst1 : has_cylinder C] [inst2 : has_cylinder_with_involution C]

include inst1

-- The homotopy extension property with respect to the given cylinder
-- functor, "on side Œµ".
def hep (Œµ) {A X : C} (j : A ‚ü∂ X) : Prop :=
‚àÄ Y (f : X ‚ü∂ Y) (H : I +> A ‚ü∂ Y), f ‚àò j = H ‚àò i Œµ @> A ‚Üí
  ‚àÉ H' : I +> X ‚ü∂ Y, H' ‚àò i Œµ @> X = f ‚àß H' ‚àò I &> j = H

lemma hep_iff_pushout_retract (Œµ) {A X : C} {j : A ‚ü∂ X}
  {Z : C} {i' : X ‚ü∂ Z} {j' : I +> A ‚ü∂ Z} (po : Is_pushout j (i Œµ @> A) i' j') :
  hep Œµ j ‚Üî ‚àÉ r : I +> X ‚ü∂ Z,
    r ‚àò po.induced (i Œµ @> X) (I &> j) ((i Œµ).naturality _) = ùüô _ :=
iff.intro
  (assume h,
    let ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := h Z i' j' po.commutes in
    ‚ü®r, by apply po.uniqueness; rw ‚Üêassociativity; simpa‚ü©)
  (assume ‚ü®r, hr‚ü© Y f H e,
    have hr‚ÇÅ : r ‚àò i Œµ @> X = i', from eq.symm $ calc
      i' = ùüô _ ‚àò i' : by simp
     ... = (r ‚àò _) ‚àò i' : by rw hr
     ... = _ : by rw ‚Üêassociativity; simp,
    have hr‚ÇÇ : r ‚àò I &> j = j', from eq.symm $ calc
      j' = ùüô _ ‚àò j' : by simp
     ... = (r ‚àò _) ‚àò j' : by rw hr
     ... = _ : by rw ‚Üêassociativity; simp,
    ‚ü®po.induced f H e ‚àò r,
     by rw [‚Üêassociativity, hr‚ÇÅ]; simp,
     by rw [‚Üêassociativity, hr‚ÇÇ]; simp‚ü©)

-- The two-sided homotopy extension property.
@[reducible] def two_sided_hep {A X : C} (j : A ‚ü∂ X) : Prop := ‚àÄ Œµ, hep Œµ j

omit inst1
include inst2

lemma hep_involution {Œµ} {A X : C} {j : A ‚ü∂ X} (h : hep Œµ j) : hep Œµ.v j :=
assume Y f H e,
  let ‚ü®H‚ÇÅ, h‚ÇÅ, h‚ÇÇ‚ü© := h Y f (H ‚àò v @> A)
    (by convert e using 1; rw [‚Üêassociativity]; simp) in
  ‚ü®H‚ÇÅ ‚àò v @> X,
   by rw ‚Üêassociativity; simpa,
   calc
     H‚ÇÅ ‚àò v @> X ‚àò I &> j
       = H‚ÇÅ ‚àò (v @> X ‚àò I &> j) : by simp
   ... = H‚ÇÅ ‚àò (I &> j ‚àò v @> A) : by rw v.naturality
   ... = (H‚ÇÅ ‚àò I &> j) ‚àò v @> A : by simp
   ... = (H ‚àò v @> A) ‚àò v @> A  : by rw h‚ÇÇ
   ... = H                      : by rw ‚Üêassociativity; simp‚ü©

lemma two_sided_hep_iff_hep {Œµ} {A X : C} {j : A ‚ü∂ X} : two_sided_hep j ‚Üî hep Œµ j :=
have ‚àÄ Œµ', Œµ' = Œµ ‚à® Œµ' = Œµ.v, by intro Œµ'; cases Œµ; cases Œµ'; simp; refl,
iff.intro (assume h, h Œµ)
  (assume h Œµ', begin
    cases this Œµ'; subst Œµ', { exact h }, { exact hep_involution h }
  end)

end hep

end homotopy_theory.cylinder
